package lanat.parsing.errors;

import lanat.ArgumentParser;
import lanat.Command;
import lanat.parsing.Token;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

/**
 * Handles all errors generated by the parser and tokenizer.
 */
public class ErrorsCollector {
	private final @NotNull ArgumentParser argumentParser;
	private final @NotNull List<@NotNull Token> fullTokenList;
	private final @NotNull Hashtable<Command, List<Error<?>>> errors = new Hashtable<>();

	public ErrorsCollector(@NotNull ArgumentParser argumentParser) {
		this.argumentParser = argumentParser;
		this.fullTokenList = argumentParser.getFullTokenList();
	}

	public void collect(@NotNull Command command) {
		this.errors.put(command, new ArrayList<>() {{
			this.addAll(command.getTokenizer().getErrorsUnderDisplayLevel());
			this.addAll(command.getParser().getErrorsUnderDisplayLevel());
			command.getArguments().forEach(arg -> this.addAll(arg.getErrorsUnderDisplayLevel()));
			this.addAll(command.getErrorsUnderDisplayLevel());
		}});
	}

	public void collectAllInTree() {
		this.argumentParser.getTokenizer().getTokenizedCommands().forEach(this::collect);
	}

	public List<String> handleErrors() {
		// reuse the same context for all errors of the same type. only create a new one when needed.
		final var errorMessages = new ArrayList<String>();

		for (var pair : this.errors.entrySet()) {
			final var command = pair.getKey();
			final var errors = pair.getValue();

			TokenizeContext tokenizeContext = null;
			ParseContext parseContext = null;

			for (var error : errors) {
				final var errorFormatter = new ErrorFormattingContext();

				if (error instanceof Error.TokenizeError tokenizeError) {
					if (tokenizeContext == null)
						tokenizeContext = new TokenizeContext(command);

					tokenizeError.handle(errorFormatter, tokenizeContext);
				} else if (error instanceof Error.ParseError parseError) {
					if (parseContext == null)
						parseContext = new ParseContext(this.fullTokenList, command);

					parseError.handle(errorFormatter, parseContext);
				}

				errorFormatter.generate
			}
		}

	}
}