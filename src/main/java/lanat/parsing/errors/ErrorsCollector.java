package lanat.parsing.errors;

import lanat.ArgumentParser;
import lanat.parsing.Token;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;

/**
 * Handles all errors generated by the parser and tokenizer.
 */
public class ErrorsCollector {
	private final @NotNull ArgumentParser argumentParser;
	private final @NotNull List<@NotNull Token> fullTokenList;

	public ErrorsCollector(@NotNull ArgumentParser argumentParser) {
		this.argumentParser = argumentParser;
		this.fullTokenList = argumentParser.getFullTokenList();
	}

	public List<String> handleErrors() {
		// reuse the same context for all errors of the same type. only create a new one when needed.
		TokenizeContext tokenizeContext = null;
		ParseContext parseContext = null;
		final var errorMessages = new ArrayList<String>();

		for (var error : this.getErrors()) {
			final var errorFormatter = new ErrorFormatter();

			if (error instanceof ErrorHandler.TokenizeErrorHandler tokenizeError) {
				if (tokenizeContext == null)
					tokenizeContext = new TokenizeContext(this.argumentParser);

				tokenizeError.handle(errorFormatter, tokenizeContext);
			} else if (error instanceof ErrorHandler.ParseErrorHandler parseError) {
				if (parseContext == null)
					parseContext = new ParseContext(this.argumentParser);

				parseError.handle(errorFormatter, parseContext);
			}

		}
	}
}